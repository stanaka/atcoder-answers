package main

import (
	"bufio"
	"fmt"
	"io"
	"os"
	"strconv"
)

var sc *bufio.Scanner

func nextInt() int {
	sc.Scan()
	i, e := strconv.Atoi(sc.Text())
	if e != nil {
		panic(e)
	}
	return i
}


func answer(reader io.Reader, writer io.Writer) {
	sc = bufio.NewScanner(reader)
	sc.Split(bufio.ScanWords)
	n := nextInt()
	c := make([]int, n)
	p := make([]int, n)
	e := map[int]map[int]int{}
	f := make(map[int]bool)

	for i := 0; i < n; i++ {
		e[i] = map[int]int{}
		c[i] = 0
	}
	for i := 0; i < n - 1; i++ {
		u:= nextInt()
		v:= nextInt()
		w:= nextInt()

		e[u-1][v-1] = w
		e[v-1][u-1] = w
	}
	//fmt.Printf("%v\n", e)
	c[0] = 0
	p[0] = 0
	count := 1
	idx := 1
	for i:=0; i<count; i++ {
		k1 := p[i]
		fmt.Printf("k1:%d, len(e[k1]);%d\n", k1, len(e[k1]))
		for k2, _ := range e[k1] {
			_, ok := f[k2]
			if ok {
				continue
			}
			if e[k1][k2] % 2 == 0 {
				c[k2] = c[k1]
			} else {
				c[k2] = (c[k1]+1)%2
			}
			p[idx] = k2
			idx++
			count++
		}
		f[k1]= true
	}
	for i := 0; i < n; i++ {
		_, _ = fmt.Fprintf(writer, "%d", c[i])
		if i < n-1 {
			_, _ = fmt.Fprint(writer, "\n")
		}
	}
}


func answer2(reader io.Reader, writer io.Writer) {
	var n int
	fmt.Fscan(reader, &n)
	c := make([]int, n)
	e := map[int]map[int]int{}
	p := make(map[int]struct{})
	f := make(map[int]struct{})
	for i := 0; i < n; i++ {
		e[i] = map[int]int{}
		c[i] = 0
	}
	for i := 0; i < n - 1; i++ {
		var u,v,w int
		fmt.Fscan(reader, &u)
		fmt.Fscan(reader, &v)
		fmt.Fscan(reader, &w)
		e[u-1][v-1] = w
		e[v-1][u-1] = w
	}
	//fmt.Printf("%v\n", e)
	c[0] = 0
	p[0] = struct{}{}
	for len(p) > 0 {
		for k1, _ := range p {
			for k2, _ := range e[k1] {
				_, ok := f[k1]
				if ok {
					continue
				}
				if e[k1][k2] % 2 == 0 {
					c[k2] = c[k1]
				} else {
					c[k2] = (c[k1]+1)%2
				}
				p[k2] = struct{}{}
			}
			delete(p, k1)
			f[k1]= struct{}{}
		}
	}
	for i := 0; i < n; i++ {
		_, _ = fmt.Fprintf(writer, "%d", c[i])
		if i < n-1 {
			_, _ = fmt.Fprint(writer, "\n")
		}
	}

}

func main() {
	answer(os.Stdin, os.Stdout)
}
